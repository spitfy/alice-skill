// Code generated by MockGen. DO NOT EDIT.
// Source: internal/store/store.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	store "github.com/spitfy/alice-skill/internal/store"
)

// MockMessageStore is a mock of MessageStore interface.
type MockMessageStore struct {
	ctrl     *gomock.Controller
	recorder *MockMessageStoreMockRecorder
}

// MockMessageStoreMockRecorder is the mock recorder for MockMessageStore.
type MockMessageStoreMockRecorder struct {
	mock *MockMessageStore
}

// NewMockMessageStore creates a new mock instance.
func NewMockMessageStore(ctrl *gomock.Controller) *MockMessageStore {
	mock := &MockMessageStore{ctrl: ctrl}
	mock.recorder = &MockMessageStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMessageStore) EXPECT() *MockMessageStoreMockRecorder {
	return m.recorder
}

// FindRecipient mocks base method.
func (m *MockMessageStore) FindRecipient(ctx context.Context, username string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindRecipient", ctx, username)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindRecipient indicates an expected call of FindRecipient.
func (mr *MockMessageStoreMockRecorder) FindRecipient(ctx, username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindRecipient", reflect.TypeOf((*MockMessageStore)(nil).FindRecipient), ctx, username)
}

// GetMessage mocks base method.
func (m *MockMessageStore) GetMessage(ctx context.Context, id int64) (*store.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMessage", ctx, id)
	ret0, _ := ret[0].(*store.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMessage indicates an expected call of GetMessage.
func (mr *MockMessageStoreMockRecorder) GetMessage(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMessage", reflect.TypeOf((*MockMessageStore)(nil).GetMessage), ctx, id)
}

// ListMessages mocks base method.
func (m *MockMessageStore) ListMessages(ctx context.Context, userID string) ([]store.Message, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListMessages", ctx, userID)
	ret0, _ := ret[0].([]store.Message)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListMessages indicates an expected call of ListMessages.
func (mr *MockMessageStoreMockRecorder) ListMessages(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListMessages", reflect.TypeOf((*MockMessageStore)(nil).ListMessages), ctx, userID)
}

// SaveMessage mocks base method.
func (m *MockMessageStore) SaveMessage(ctx context.Context, userID string, msg store.Message) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveMessage", ctx, userID, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveMessage indicates an expected call of SaveMessage.
func (mr *MockMessageStoreMockRecorder) SaveMessage(ctx, userID, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveMessage", reflect.TypeOf((*MockMessageStore)(nil).SaveMessage), ctx, userID, msg)
}
